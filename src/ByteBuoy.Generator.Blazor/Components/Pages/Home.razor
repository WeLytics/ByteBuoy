@page "/"
@using ByteBuoy.Domain.Entities.Config
@using ByteBuoy.Domain.Entities.Config.Actions
@using YamlDotNet.Serialization

<h3>Add Jobs</h3>

<!-- Job Selection -->
<select @onchange="HandleJobSelection">
    <option value="fileCopy">File Copy Job</option>
    <option value="checkHash">Check Hash Job</option>
</select>
@* 
<!-- Dynamic Form Based on Selection -->
@if (selectedJobType == "fileCopy")
{
    <EditForm Model="newFileCopyJob" OnValidSubmit="AddFileCopyJob">
        <!-- Form fields for FileCopyJob -->
        <InputText @bind-Value="newFileCopyJob.Description" />
        <!-- Add fields for sources, targets, etc. -->
        <button type="submit">Add File Copy Job</button>
    </EditForm>
}
else if (selectedJobType == "checkHash")
{
    <EditForm Model="newCheckHashJob" OnValidSubmit="AddCheckHashJob">
        <!-- Form fields for CheckHashJob -->
        <InputText @bind-Value="newCheckHashJob.Description" />
        <!-- Add fields for paths, etc. -->
        <button type="submit">Add Check Hash Job</button>
    </EditForm>
} *@

<!-- Display Added Jobs and YAML Output -->
<h3>Added Jobs</h3>
@foreach (var job in jobConfigs)
{
    <p>@job.Description</p>
    <!-- Display other job details -->
}

<!-- Button to Generate YAML -->
<button @onclick="GenerateYaml">Generate YAML</button>

@code {
    string selectedJobType = "fileCopy";
    List<ActionConfig> jobConfigs = new List<ActionConfig>();

    void HandleJobSelection(ChangeEventArgs e)
    {
        selectedJobType = e.Value!.ToString()!;
    }

    // void AddFileCopyJob()
    // {
    //     jobConfigs.Add(new FilesCopyConfig() { Name = "File Copy config" }; );
    // }

    // void AddCheckHashJob()
    // {
    //     jobConfigs.add(new CheckHashesConfig() { Name = "Check Files Config" }); 
    // }

    void GenerateYaml()
    {
        var serializer = new Serializer();
        var yaml = serializer.Serialize(jobConfigs);
        Console.WriteLine(yaml); // Ideally, show this in the UI or allow users to copy/download it
    }
}
